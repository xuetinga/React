{"version":3,"sources":["components/List.js","components/btns.js","pages/Home.js","components/Control.js","pages/context.js","pages/Demo02.js","pages/Demo01.js","pages/App.js","pages/Hoc.js","components/Input.js","components/TodoList.js","index.js"],"names":["List","done","this","props","id","renderTodos","Component","Buttons","map","item","key","onClick","getData","React","Context","createContext","Demo02","style","width","height","backgroundColor","Consumer","data","Demo01","protoTypes","name","PropTypes","string","isRequired","defaultProps","console","log","withFetch","Com","url","state","fetch","then","res","json","setState","Input","dangerouslySetInnerHTML","__html","content","title","htmlFor","type","onChange","handleChange","value","inpValue","ref","inp","input","placeholder","addTodo","TodoList","e","target","todos","toggle","index","newTodos","JSON","parse","stringify","removeTodo","filter","idx","localStorage","setItem","todo","checked","getItem","arr1","arr2","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.361b2015.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nexport default class List extends Component {\r\n  render() {\r\n    const done = this.props.done\r\n      return (\r\n        <div id=\"div2\">\r\n          <ul id=\"doing\"> \r\n            {this.props.renderTodos(done)}\r\n          </ul>\r\n        </div>\r\n        \r\n      )\r\n  }\r\n}","import React from 'react';\r\n//函数 数组任何数据都在props中\r\nconst Buttons = (props)=>{\r\n    const btns = [1,2,3,4,5];\r\n    {\r\n        return <div>{\r\n            btns.map(\r\n                (item)=>(\r\n                  <button \r\n                    key={item}  onClick = {()=>props.getData(item)}\r\n                  >\r\n                    {item}\r\n                  </button>\r\n              ))\r\n            }\r\n\r\n        </div>\r\n       \r\n      }\r\n}\r\n\r\n\r\nexport default Buttons;","import React,{Component} from 'react'; //这一个是必须写的 因为这里面用到了\r\nimport List from '../components/List'  //这里也要去引用List\r\nimport Buttons from '../components/btns';\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        data:[]\r\n      }\r\n      // this.handleClick = this.handleClick.bind(this)\r\n    }\r\n  componentDidMount(){\r\n      fetch('https://cnodejs.org/api/v1/topics')\r\n      .then(res=>res.json())\r\n      .then( ({data}) => {\r\n        console.log(data);\r\n        this.setState({data})\r\n      })\r\n    }\r\n  getData=(page)=>{\r\n    console.log(page);\r\n    fetch('https://cnodejs.org/api/v1/topics?page='+page).\r\n    then(res=>res.json()).\r\n    then(({data})=>{\r\n    console.log(data);\r\n    this.setState({data}); //这里拿到json数据\r\n  })\r\n  }\r\n    render(){\r\n      const { data } = this.state;\r\n      return <div>\r\n          \r\n        <Buttons getData = {this.getData}/>\r\n        <List data={data}/>\r\n      </div>\r\n    }\r\n  }\r\n  //命名导出 默认导出 主要看react都是默认导出不用取名    \r\n  //默认导出 只能导出一个\r\n  export default Home; //这里是默认导出  \r\n\r\n//   //命名导出\r\n//   let a =10;\r\n//   export {a}\r\n//   //在另一个文件引用的时候就是  \r\n//   import {a} from ''\r\n\r\n","\r\nimport React, { Component } from 'react'\r\n//引入样式样式\r\nimport './control.css';\r\nexport default class Control extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue :'',\r\n            todos:[{title:'1',done:false},\r\n            {title:'2',done:true},\r\n            {title:'3',done:false},\r\n            {title:'4',done:false}\r\n        \r\n        ],\r\n        // finished:[\r\n        //     {title:'',done:false}\r\n        // ]\r\n        }\r\n    }\r\n    //获取实时内容\r\n    handleChange = (e)=>{\r\n        console.log(\"执行了handlechange\");\r\n        console.log(e.target.value);\r\n        this.setState({inpValue:e.target.value});\r\n\r\n        // localStorage.setItem('KEY',e.target.value);\r\n\r\n    }\r\n    // addChange = (todos)=>{\r\n    //     this.setState({todos.title:todos.target.value})\r\n    // }\r\n    \r\n    //这个的作用是 让他刷新之后还存在 在这里去存\r\n    componentDidUpdate(){\r\n        console.log(\"执行了update\");\r\n        localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n        \r\n\r\n    }\r\n\r\n    //在这里面去取\r\n    componentDidMount(){\r\n        console.log(\"执行了didmount\");\r\n\r\n        this.input.focus();\r\n        // this.input.value; 这样也可以\r\n        let todos = localStorage.getItem('todos');//todos在最初进来的时候没有 \r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n            //有就把值赋给 todos \r\n        }\r\n    }\r\n    //添加内容到已经完成里面\r\n    addTodo=()=>{\r\n        console.log(\"执行了addtodo\");\r\n\r\n        if(this.state.inpValue){\r\n            this.setState({\r\n                todos:[\r\n                    {\r\n                        title:this.state.inpValue,\r\n                        done:false},\r\n                        ...this.state.todos\r\n                ]\r\n            })\r\n            this.setState({inpValue:''})\r\n        }\r\n        \r\n        // else{\r\n        //     return;\r\n        // }\r\n        \r\n    }\r\n    // addTodo=()=>{\r\n    //     this.state.todos.push({title:this.state.inpValue}); //在数组里面再添加一项\r\n    //     this.setState({todos:this.state.todos});\r\n    // }\r\n    //删除内容\r\n    removeTodo=(index)=>{\r\n        console.log(\"执行了removetodo\");\r\n\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos));//深拷贝 一个全新的\r\n        // newTodos.splice(index,1);\r\n        // this.setState({\r\n        //     todos:newTodos\r\n        // })\r\n        //  另一种方法\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,idx)=>\r\n                index!=idx\r\n                //不等于它就是真的 就会返回 这里就是直接一个函数。 这里是一个返回值\r\n            )\r\n        },()=>{\r\n            localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n\r\n        })\r\n\r\n        // console.log(e);\r\n        // console.log(this.state.todos[0].title);\r\n    }\r\n    // setStatus=(status)=>{\r\n    //     console.log(status);\r\n    //     if(status){\r\n    //         this.setState(\r\n    //             {\r\n    //                 finished:[\r\n    //                     {title:this.state.inpValue,done:false},...this.state.todos\r\n    //                 ]\r\n    //             }\r\n    //         )\r\n    //     }\r\n    // }\r\n    toggle=(index)=>{\r\n        console.log(\"执行了toggle\");\r\n\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n           todos:newTodos\r\n        });\r\n      \r\n    }\r\n    renderTodos=(done)=>{\r\n        console.log(\"执行了rendertodo\");\r\n    \r\n      return this.state.todos.map((todo,index) =>{\r\n            if(done == todo.done){\r\n                return <li>\r\n                    {/* <input type=\"checkbox\" onClick={()=>this.setStatus(todo.done)} /> */}\r\n                    <input  onClick={()=>this.toggle(index)}  checked={done}  type=\"checkbox\"/ >\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    {/* 这里是实现添加那个<h1>ddd</h1>的  就是解析标签 */}\r\n                    {/* <span >{todo.title}</span> */}\r\n\r\n                    <button onClick={()=>this.removeTodo(index)}>删除 </button>\r\n                </li>\r\n            }\r\n            \r\n        })\r\n    }\r\n    render() { \r\n        //  localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n        //写在这里都会执行 就不用在toggle中写了\r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter(item=>item.done);\r\n        let arr2 = todos.filter(item=>!item.done);\r\n        // let arr1 = todos.filter((item,index)=>{\r\n        //     return !item.done;\r\n        //     console.log(index,item);\r\n        // })\r\n        //每循环一次 回调函数执行一次\r\n        return (\r\n            <div className='box'>\r\n                <label htmlFor=\"inp\">todolist\r\n                \r\n                </label>\r\n                <input id =\"inp\"value={inpValue} type=\"text\" onChange={this.handleChange} ref={inp =>this.input = inp} action=\"#content\" placeholder=\"todo\" >\r\n                    {/* 加入了value就是react的了 value后面的值不能动了 就是一改变就会调用这个函数  value后面的值是默认的 给他赋值是e.target.value 走了setState就会更新*/}\r\n                </input>\r\n                <button onClick={this.addTodo} >\r\n                    添加\r\n                </button>\r\n                <h2>\r\n                    正在进行{arr2.length}\r\n                </h2>\r\n               \r\n                {/* {\r\n                    [{title:1,done:false},{}].map()\r\n                } */}\r\n                <ul id=\"doing\">\r\n                    \r\n                    {this.renderTodos(false)}\r\n                   \r\n                </ul>\r\n                <h2>\r\n                    已经完成{arr1.length}\r\n                </h2>\r\n                <ul style={{color:'blue'}}>\r\n                    {/* //里面是个对象变量 第一个是变量括起来 里面是对象 marginRight */}\r\n                    {/* {{color:3>2'red':'green'}} */}\r\n                    \r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n                {\r\n                    3>2 ? <button>登录</button>:<span>不成立</span>\r\n                }\r\n                {/* 可以直接加条件判断 不能查if语句 因为放的要是一个值 */}\r\n                <button>\r\n                    {2>3?'真':'假'}\r\n                    {/* 声明一个状态 每次取反 ture一直切换  */}\r\n\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nconst Context = React.createContext();//返回一个对象 来接受它、\r\nexport default Context;\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from './context'\r\n\r\nfunction Demo02() {\r\n    return (\r\n        <div style={{width:100,height:'100px',backgroundColor:'red'}}>\r\n                    <h2>demo02</h2>\r\n                    <ul>\r\n                        <Context.Consumer>\r\n                        {\r\n                            data=>data.data.map((item)=><li key={item}>{item}</li>)\r\n                            // data =>data.map(item=><li key ={item}>{item}</li>)\r\n                        }\r\n                        </Context.Consumer>\r\n                    </ul>\r\n                    \r\n\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default Demo02\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from './context'\r\nimport Demo02 from './Demo02'\r\n\r\n//小练习 对于行内加样式\r\n\r\n        const Demo01 = (props)=>{\r\n            return (\r\n                <div style={{width:100,height:'100px',backgroundColor:'red'}}>\r\n                    <h2>demo01</h2>\r\n                    <ul>\r\n                        <Context.Consumer>\r\n                        {\r\n                            data=>data.data.map((item)=><li key={item}>{item}</li>)\r\n                        }\r\n                        </Context.Consumer>\r\n                    </ul>\r\n                    <Demo02/>\r\n                        {/* 这里引用就直接写就行 */}\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    \r\n\r\nDemo01.protoTypes ={\r\n    name:PropTypes.string.isRequired\r\n    //必须传的  \r\n}\r\nDemo01.defaultProps={\r\n    name:'tomg'\r\n    // 就是你没有传参数的时候 给你一个默认的。\r\n}\r\nexport default Demo01\r\n","import React from 'react'\r\nimport Context from './context'\r\nimport Demo01 from './Demo01';\r\nimport Demo02 from './Demo02';\r\nconsole.log(Context);\r\n\r\n\r\n// const App = () => {  //这是顶层的\r\n//     let data = {\r\n//         data:['222','hee']\r\n//     }//让他在任意子文件可以访问到\r\n//     return (\r\n//        <Context.Provider value={data}>\r\n//            <Demo01/>{/* 这是第一层 */}\r\n\r\n\r\n\r\n//        </Context.Provider>\r\n//     )\r\n// }\r\nclass App extends React.Component{\r\n    constructor(){\r\n    super();\r\n    //  声明状态\r\n     this.state = {\r\n        data:['111','222'],\r\n     }\r\n    \r\n  }\r\n  changeData = (newData)=>{\r\n      this.setState({data:[...this.state.data,newData]})\r\n  }\r\n  render(){\r\n    return <Context.Provider value={{\r\n        data:this.setState.data,\r\n        changeData:this.changeData\r\n        }}>\r\n        <Demo01/>\r\n    </Context.Provider>\r\n  }\r\n\r\n}\r\n\r\nexport default App\r\n// 第一步 创建一个文件 生成一个上下文 导出去\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n//高阶函数 接受一个组件返回一个新的组件\r\nconst withFetch = (Com,url)=>{\r\n    return class Topic extends Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                data:[]\r\n            }\r\n        }\r\n        componentDidMount(){\r\n            fetch(url)\r\n            .then(res=>res.json())\r\n            .then(res=>this.setState({data:res.data}))\r\n        }\r\n        render(){\r\n            return <Com data={this.state.data}/>\r\n        }\r\n    }\r\n}\r\nconst De =(props)=>{\r\n    return <div>\r\n        <h1>标题</h1>\r\n        {/* <div>{props.data.content}</div> */}\r\n        <div dangerouslySetInnerHTML={\r\n            {__html:props.data.content}\r\n            // 这里是获取到了Com 组件中data属性的内容\r\n        } ></div>\r\n    </div>\r\n}\r\nexport const Detail = withFetch(De,'https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312');\r\n\r\n// 详情页\r\n// export class Detail extends Component{\r\n//     constructor(){\r\n//         super();\r\n//         this.state={\r\n//             data:''\r\n//         }\r\n//     }\r\n//     componentDidMount(){\r\n//         fetch('https://cnodejs.org/topic/5e16978581adfe260207a8c1')\r\n//         .then(res=>res.json())\r\n//         .then(res=>this.setState({data:res.data.content}))\r\n//     }\r\n//     render(){\r\n//         return<div>\r\n//             <h1>标题</h1>\r\n//             <div>{this.state.data}</div>\r\n//         </div>\r\n//     }\r\n// }\r\n\r\n\r\n// export class Hoc extends Component {\r\n//     constructor(){\r\n//         super();\r\n//         this.state = {\r\n//             data:[]\r\n//         }\r\n//     }\r\n//     componentDidMount(){\r\n//         fetch('https://cnodejs.org/api/v1/topics')\r\n//         .then(res=>res.json())\r\n//         .then(res=>this.setState({data:res.data}))\r\n//     }\r\n//     render() {\r\n//         console.log(this.state.data);\r\n//         return (\r\n//             <div>\r\n//                 hoc\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n// 这是对上面的简化\r\nconst Ho = (props)=>{\r\n    console.log(props.data);\r\n    return <ul>\r\n        {\r\n            props.data.map((item)=><li>{item.title}</li>)\r\n        }\r\n    </ul>\r\n}\r\nconst Hoc = withFetch(Ho,'https://cnodejs.org/api/v1/topics')\r\nexport default Hoc;\r\n","import React,{Component} from 'react';\r\n// import TodoList from './TodoList'\r\n// import './TodoList.css';\r\nexport default class Input extends Component {\r\n   \r\n\r\n    render() {\r\n        return (\r\n            <div id=\"div1\">  \r\n                <label htmlFor=\"inp\">\r\n                    todolist \r\n                </label>\r\n\r\n                <input id=\"inp\" \r\n                type=\"text\"\r\n                onChange={this.props.handleChange} \r\n                value={this.props.inpValue}\r\n                ref={inp =>this.input = inp}\r\n                placeholder=\"添加ToDo\" >\r\n                </input>\r\n\r\n                <button  \r\n                onClick={this.props.addTodo} >\r\n                    添加\r\n                </button>\r\n            </div>\r\n        \r\n        \r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n//引入样式样式\r\n// import './TodoList.css';\r\nimport List from './List';\r\nimport Input from'./Input';\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue :'',\r\n            todos:[ ],\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value});\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n    }\r\n\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');//todos在最初进来的时候没有 \r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    addTodo=()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n    }\r\n    toggle=(index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    removeTodo=(index)=>{\r\n        this.setState({\r\n          todos:this.state.todos.filter((item,idx)=>\r\n              index!=idx\r\n          )\r\n      },()=>{\r\n          localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n      })\r\n    \r\n      // console.log(e);\r\n      // console.log(this.state.todos[0].title);\r\n    }\r\n    renderTodos=(done)=>{\r\n        return this.state.todos.map((todo,index) =>{\r\n              if(done == todo.done){\r\n                  return <li>\r\n                      <input  onClick={()=>this.toggle(index)}  checked={done}  type=\"checkbox\"/ >\r\n                      <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                      <button onClick={()=>this.removeTodo(index)}>删除 </button>\r\n                  </li>\r\n              }\r\n          })\r\n      }\r\n    render(){\r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter(item=>!item.done);\r\n        let arr2 = todos.filter(item=>item.done);\r\n        return (\r\n            <div>\r\n               <Input\r\n            addTodo={this.addTodo} \r\n            handleChange = {this.handleChange}\r\n            inpValue = {inpValue}\r\n                 /> \r\n                <h2>正在进行{arr1.length}</h2>\r\n               <List renderTodos={this.renderTodos} done={false}/>\r\n               <h2>已经完成{arr2.length}</h2>\r\n               <List renderTodos={this.renderTodos} done={true}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';//这个只要index 引用了就行\r\nimport Home from './pages/Home'; //导入那一个文件  \r\nimport List from './components/List'; //要导入那个文件的内容\r\n//变灰了就是声明了没有用\r\nimport Control from './components/Control';\r\nimport Demo01 from './pages/Demo01';\r\nimport App from './pages/App';\r\nimport Hoc,{Detail} from './pages/Hoc';\r\nimport Hook from './pages/Hook';\r\nimport Context from './pages/context'\r\nimport TodoList from './components/TodoList'\r\n\r\n\r\n// alt shift + 上下键   复制一行\r\n// alt + 上下键         移动一行\r\n// 按住alt ，鼠标点击\r\n// Ctrl + shift + 左右键，选中整个单词\r\n// ctrl+shift+L \r\n\r\n\r\n\r\nReactDOM.render(\r\n  // <Control/>\r\n  <TodoList/>\r\n    // <Context.Provider value='usecontext'>\r\n    //   <Hook/>\r\n    // </Context.Provider>\r\n\r\n ,\r\n  // <Hook/>,\r\n  // <div><Hoc/><Detail/></div>,\r\n  // <Hoc/>,\r\n  // <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// 组件声明\r\n// 函数组件\r\n// UI（展示）组件，木偶组件\r\n// function App(props){\r\n//   const { title, id } = props;\r\n//   return <div>\r\n//     <h1>App组件内容</h1>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// }\r\n// // 智能组件\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//      super();\r\n//     //  声明状态\r\n//      this.state = {\r\n//        name: new Date().toLocaleString()\r\n//      }\r\n//      setInterval(()=>{\r\n//       this.setState({name:new Date().toLocaleString()})\r\n//      },1000)\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <div>name:{this.state.name}</div>\r\n//       <App title={this.state.name} id='app'/>\r\n//     </div>\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// let ele = React.createElement(\r\n//   'h1',\r\n//   {id:'title'},\r\n//   React.createElement('div',{},'hello'),\r\n//   'react'\r\n// )\r\n\r\n// 将jsx对象渲染到DOM中\r\n// let ReactDOM = {\r\n//   render(eleObj,container){\r\n//     // 解构\r\n//     const { type,props } = eleObj;\r\n//     // 创建第一层节点\r\n//     let ele = document.createElement(type);\r\n//     // 遍历属性对象，将属性添加到第一层节点对象上\r\n//     for (const prop in props) {\r\n//       console.log(prop)\r\n//       if(prop == 'children'){\r\n//         if(typeof props.children == 'string'){\r\n//             const txtNode = document.createTextNode(props.children);\r\n//             ele.appendChild(txtNode);\r\n//             break;\r\n//         }\r\n//         // 将第一层节点对象的子元素添加进去\r\n//         props.children.forEach( child => {\r\n//           if(typeof child == 'string'){\r\n//             const txtNode = document.createTextNode(child);\r\n//             ele.appendChild(txtNode);\r\n//           }else{\r\n//             ReactDOM.render(child,ele);\r\n//           }\r\n//         })\r\n//       }else{\r\n//         ele[prop] = props[prop];\r\n//       }\r\n//     }\r\n\r\n//     // 将第一层DOM节点添加到container中\r\n//     container.appendChild(ele);\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n  // 1、原生JS，DOM操作（jQ）\r\n  // 2、React：开发效率高、性能高\r\n  // 3、环境搭建、创建一个项目、运行\r\n  // 4、JSX语法\r\n\r\n  \r\n\r\n"],"sourceRoot":""}